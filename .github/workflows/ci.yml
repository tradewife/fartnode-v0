name: CI

on:
  push:
    branches:
      - main
      - "feat/**"
      - "fix/**"
      - "chore/**"
  pull_request:
    branches:
      - "**"

jobs:
  js:
    name: JS Quality
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: vibesdk

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Detect package manager
        id: detect-pm
        run: |
          set -euo pipefail
          if [[ -f bun.lock || -f bun.lockb ]]; then
            echo "pm=bun" >> "$GITHUB_OUTPUT"
            echo "install=bun install --frozen-lockfile" >> "$GITHUB_OUTPUT"
            echo "run=bun run" >> "$GITHUB_OUTPUT"
            echo "exec=bunx" >> "$GITHUB_OUTPUT"
          elif [[ -f pnpm-lock.yaml ]]; then
            echo "pm=pnpm" >> "$GITHUB_OUTPUT"
            echo "install=pnpm install --frozen-lockfile" >> "$GITHUB_OUTPUT"
            echo "run=pnpm" >> "$GITHUB_OUTPUT"
            echo "exec=pnpm exec" >> "$GITHUB_OUTPUT"
          elif [[ -f yarn.lock ]]; then
            echo "pm=yarn" >> "$GITHUB_OUTPUT"
            echo "install=yarn install --frozen-lockfile" >> "$GITHUB_OUTPUT"
            echo "run=yarn" >> "$GITHUB_OUTPUT"
            echo "exec=yarn" >> "$GITHUB_OUTPUT"
          elif [[ -f package-lock.json ]]; then
            echo "pm=npm" >> "$GITHUB_OUTPUT"
            echo "install=npm ci" >> "$GITHUB_OUTPUT"
            echo "run=npm run" >> "$GITHUB_OUTPUT"
            echo "exec=npx" >> "$GITHUB_OUTPUT"
          else
            echo "No known package manager lockfile found." >&2
            exit 1
          fi

      - name: Setup Bun
        if: steps.detect-pm.outputs.pm == 'bun'
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.2.22

      - name: Setup Node
        if: steps.detect-pm.outputs.pm != 'bun'
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-pm.outputs.pm }}
          cache-dependency-path: |
            vibesdk/package-lock.json
            vibesdk/pnpm-lock.yaml
            vibesdk/yarn.lock

      - name: Enable Corepack
        if: steps.detect-pm.outputs.pm == 'pnpm' || steps.detect-pm.outputs.pm == 'yarn'
        run: corepack enable

      - name: Install dependencies
        run: ${{ steps.detect-pm.outputs.install }}

      - name: Print tool versions
        run: |
          node -v || true
          pnpm -v || true
          yarn -v || true
          npm -v || true
          bun -v || true

      - name: Lint
        run: ${{ steps.detect-pm.outputs.run }} lint

      - name: Typecheck
        run: ${{ steps.detect-pm.outputs.exec }} tsc --noEmit

      - name: Test
        run: ${{ steps.detect-pm.outputs.run }} test

      - name: Build
        run: ${{ steps.detect-pm.outputs.run }} build

  rust:
    name: Rust Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Detect Cargo manifests
        id: detect-cargo
        shell: bash
        run: |
          set -euo pipefail
          manifests=$(find . -path "./.git" -prune -o -path "./.github" -prune -o -path "*/node_modules/*" -prune -o -name Cargo.toml -print)
          if [[ -z "${manifests}" ]]; then
            echo "has=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          echo "has=true" >> "$GITHUB_OUTPUT"
          {
            echo "manifests<<'EOF'"
            echo "${manifests}"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Install Rust toolchain
        if: steps.detect-cargo.outputs.has == 'true'
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy,rustfmt

      - name: Rustfmt / Clippy / Tests
        if: steps.detect-cargo.outputs.has == 'true'
        shell: bash
        env:
          MANIFESTS: ${{ steps.detect-cargo.outputs.manifests }}
        run: |
          set -euo pipefail
          while IFS= read -r manifest; do
            [[ -z "${manifest}" ]] && continue
            dir=$(dirname "${manifest}")
            echo "::group::Rust checks (${dir})"
            (
              cd "${dir}"
              cargo fmt --all -- --check
              cargo clippy --workspace --all-targets -- -D warnings
              cargo test --workspace --all-targets
            )
            echo "::endgroup::"
          done <<< "${MANIFESTS}"

      - name: No Cargo projects detected
        if: steps.detect-cargo.outputs.has != 'true'
        run: echo "No Cargo manifests found. Skipping Rust checks."
